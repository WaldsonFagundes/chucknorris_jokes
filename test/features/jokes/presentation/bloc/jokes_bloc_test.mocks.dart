// Mocks generated by Mockito 5.4.4 from annotations
// in chucknorris_jokes/test/features/jokes/presentation/bloc/jokes_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:chucknorris_jokes/core/error/failures.dart' as _i7;
import 'package:chucknorris_jokes/features/jokes/domain/entities/categories.dart'
    as _i12;
import 'package:chucknorris_jokes/features/jokes/domain/entities/joke.dart'
    as _i8;
import 'package:chucknorris_jokes/features/jokes/domain/repositories/categories_repository.dart'
    as _i4;
import 'package:chucknorris_jokes/features/jokes/domain/repositories/joke_repository.dart'
    as _i2;
import 'package:chucknorris_jokes/features/jokes/domain/usecases/get_categories.dart'
    as _i11;
import 'package:chucknorris_jokes/features/jokes/domain/usecases/get_joke_by_category.dart'
    as _i5;
import 'package:chucknorris_jokes/features/jokes/domain/usecases/get_joke_by_search.dart'
    as _i9;
import 'package:chucknorris_jokes/features/jokes/domain/usecases/get_random_joke.dart'
    as _i10;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeJokeRepository_0 extends _i1.SmartFake
    implements _i2.JokeRepository {
  _FakeJokeRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCategoriesRepository_2 extends _i1.SmartFake
    implements _i4.CategoriesRepository {
  _FakeCategoriesRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetJokeByCategory].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetJokeByCategory extends _i1.Mock implements _i5.GetJokeByCategory {
  @override
  _i2.JokeRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeJokeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeJokeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.JokeRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, _i8.Joke>> call(
          _i5.CategoryParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, _i8.Joke>>.value(
            _FakeEither_1<_i7.Failure, _i8.Joke>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.Either<_i7.Failure, _i8.Joke>>.value(
                _FakeEither_1<_i7.Failure, _i8.Joke>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i8.Joke>>);
}

/// A class which mocks [GetJokeBySearch].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetJokeBySearch extends _i1.Mock implements _i9.GetJokeBySearch {
  @override
  _i2.JokeRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeJokeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeJokeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.JokeRepository);

  @override
  set repository(_i2.JokeRepository? _repository) => super.noSuchMethod(
        Invocation.setter(
          #repository,
          _repository,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i3.Either<_i7.Failure, _i8.Joke>> call(
          _i9.SearchParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, _i8.Joke>>.value(
            _FakeEither_1<_i7.Failure, _i8.Joke>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.Either<_i7.Failure, _i8.Joke>>.value(
                _FakeEither_1<_i7.Failure, _i8.Joke>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i8.Joke>>);
}

/// A class which mocks [GetRandomJoke].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRandomJoke extends _i1.Mock implements _i10.GetRandomJoke {
  @override
  _i2.JokeRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeJokeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeJokeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.JokeRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, _i8.Joke>> call(
          _i10.RandomNoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, _i8.Joke>>.value(
            _FakeEither_1<_i7.Failure, _i8.Joke>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.Either<_i7.Failure, _i8.Joke>>.value(
                _FakeEither_1<_i7.Failure, _i8.Joke>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i8.Joke>>);
}

/// A class which mocks [GetCategories].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCategories extends _i1.Mock implements _i11.GetCategories {
  @override
  _i4.CategoriesRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCategoriesRepository_2(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeCategoriesRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.CategoriesRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, _i12.Categories>> call(
          _i11.CategoriesNoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, _i12.Categories>>.value(
            _FakeEither_1<_i7.Failure, _i12.Categories>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.Either<_i7.Failure, _i12.Categories>>.value(
                _FakeEither_1<_i7.Failure, _i12.Categories>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i12.Categories>>);
}
