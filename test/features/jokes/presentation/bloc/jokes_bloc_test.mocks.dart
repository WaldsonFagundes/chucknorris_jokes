// Mocks generated by Mockito 5.4.4 from annotations
// in chucknorris_jokes/test/features/jokes/presentation/bloc/jokes_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:chucknorris_jokes/core/error/failures.dart' as _i6;
import 'package:chucknorris_jokes/features/jokes/domain/entities/jokes.dart'
    as _i7;
import 'package:chucknorris_jokes/features/jokes/domain/repositories/jokes_repository.dart'
    as _i2;
import 'package:chucknorris_jokes/features/jokes/domain/usecases/get_categories.dart'
    as _i10;
import 'package:chucknorris_jokes/features/jokes/domain/usecases/get_random_category_jokes.dart'
    as _i4;
import 'package:chucknorris_jokes/features/jokes/domain/usecases/get_random_jokes.dart'
    as _i9;
import 'package:chucknorris_jokes/features/jokes/domain/usecases/get_with_text_jokes.dart'
    as _i8;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeJokesRepository_0 extends _i1.SmartFake
    implements _i2.JokesRepository {
  _FakeJokesRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetRandomCategoryJokes].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRandomCategoryJokes extends _i1.Mock
    implements _i4.GetRandomCategoryJokes {
  @override
  _i2.JokesRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeJokesRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeJokesRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.JokesRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Jokes>> call(
          _i4.ParamsRandomCategory? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.Jokes>>.value(
            _FakeEither_1<_i6.Failure, _i7.Jokes>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i7.Jokes>>.value(
                _FakeEither_1<_i6.Failure, _i7.Jokes>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.Jokes>>);
}

/// A class which mocks [GetWithTextJokes].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWithTextJokes extends _i1.Mock implements _i8.GetWithTextJokes {
  @override
  _i2.JokesRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeJokesRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeJokesRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.JokesRepository);

  @override
  set repository(_i2.JokesRepository? _repository) => super.noSuchMethod(
        Invocation.setter(
          #repository,
          _repository,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Jokes>> call(_i8.Params? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.Jokes>>.value(
            _FakeEither_1<_i6.Failure, _i7.Jokes>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i7.Jokes>>.value(
                _FakeEither_1<_i6.Failure, _i7.Jokes>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.Jokes>>);
}

/// A class which mocks [GetRandomJokes].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRandomJokes extends _i1.Mock implements _i9.GetRandomJokes {
  @override
  _i2.JokesRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeJokesRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeJokesRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.JokesRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Jokes>> call(
          _i9.NoParamsRandom? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.Jokes>>.value(
            _FakeEither_1<_i6.Failure, _i7.Jokes>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i7.Jokes>>.value(
                _FakeEither_1<_i6.Failure, _i7.Jokes>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.Jokes>>);
}

/// A class which mocks [GetCategories].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCategories extends _i1.Mock implements _i10.GetCategories {
  @override
  _i2.JokesRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeJokesRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeJokesRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.JokesRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<String>>> call(
          _i10.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, List<String>>>.value(
            _FakeEither_1<_i6.Failure, List<String>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, List<String>>>.value(
                _FakeEither_1<_i6.Failure, List<String>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<String>>>);
}
